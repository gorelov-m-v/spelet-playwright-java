plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'io.qameta.allure' version '2.12.0'
}

group = 'com.example'
version = '1.0.0'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // Needed for SpringExtension used in main test framework classes
        implementation 'org.springframework:spring-test'

        implementation 'com.microsoft.playwright:playwright:1.48.0'
        implementation 'org.json:json:20240303'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation 'com.fasterxml.jackson.core:jackson-core'

        // JUnit API needed for main framework classes such as extensions
        implementation platform('org.junit:junit-bom:5.10.0')
        implementation 'org.junit.jupiter:junit-jupiter-api'
        implementation 'org.junit.jupiter:junit-jupiter-params'

        // Allure commons used by framework utilities and listeners
        implementation 'io.qameta.allure:allure-java-commons:2.29.0'

        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'

        testImplementation 'io.qameta.allure:allure-junit5:2.29.0'
        testRuntimeOnly 'org.aspectj:aspectjweaver:1.9.22.1'
}

test {
    useJUnitPlatform()
    systemProperties = System.getProperties() as Map<String, ?>
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}
tasks.register('playwrightInstall', JavaExec) {
    group = 'verification'
    description = 'Install Playwright browsers'
    mainClass = 'com.microsoft.playwright.CLI'
    classpath = sourceSets.test.runtimeClasspath
    args 'install'
}
test.dependsOn(playwrightInstall)
allure {
    version = '2.29.0'
    adapter {
        autoconfigure = true
        aspectjWeaver = true
        frameworks { junit5 { enabled = true } }
    }
}

def bsTask = { String name, Map<String,String> props ->
    tasks.register(name, Test) {
        useJUnitPlatform()
        systemProperty 'spring.profiles.active', 'browserstack'
        props.each { k, v -> systemProperty k, v }
        testLogging { events "passed", "skipped", "failed" }
        dependsOn(playwrightInstall)
    }
}

bsTask('bsWin10Chrome', [
        'bs.os':'Windows', 'bs.osVersion':'10',
        'bs.browser':'chrome', 'bs.browserVersion':'latest',
        'bs.name':'Spelet Win10 Chrome'
])
bsTask('bsWin11Firefox', [
        'bs.os':'Windows', 'bs.osVersion':'11',
        'bs.browser':'playwright-firefox', 'bs.browserVersion':'latest',
        'bs.name':'Spelet Win11 Firefox'
])
bsTask('bsMacChrome', [
        'bs.os':'OS X', 'bs.osVersion':'Ventura',
        'bs.browser':'chrome', 'bs.browserVersion':'latest',
        'bs.name':'Spelet macOS Chrome'
])
bsTask('bsMacSafari', [
        'bs.os':'OS X', 'bs.osVersion':'Ventura',
        'bs.browser':'playwright-webkit', 'bs.browserVersion':'latest',
        'bs.name':'Spelet macOS Safari (WebKit)'
])

bsTask('bsSamsungS20', [
        'bs.deviceName':'Samsung Galaxy S20', 'bs.osVersion':'10.0',
        'bs.browser':'chrome', 'bs.name':'Spelet Galaxy S20 Chrome'
])
bsTask('bsHuaweiP30', [
        'bs.deviceName':'Huawei P30', 'bs.osVersion':'9.0',
        'bs.browser':'chrome', 'bs.name':'Spelet Huawei P30 Chrome'
])
bsTask('bsSamsungS25Ultra', [
        'bs.deviceName':'Samsung Galaxy S25 Ultra', 'bs.osVersion':'15.0',
        'bs.browser':'chrome', 'bs.name':'Spelet Galaxy S25 Ultra Chrome'
])
bsTask('bsSamsungS24', [
        'bs.deviceName':'Samsung Galaxy S24', 'bs.osVersion':'14.0',
        'bs.browser':'chrome', 'bs.name':'Spelet Galaxy S24 Chrome'
])

bsTask('bsiPhone16', [
        'bs.deviceName':'iPhone 16', 'bs.osVersion':'18.5',
        'bs.browser':'safari', 'bs.name':'Spelet iPhone 16 Safari'
])
bsTask('bsiPhone15', [
        'bs.deviceName':'iPhone 15', 'bs.osVersion':'17.0',
        'bs.browser':'safari', 'bs.name':'Spelet iPhone 15 Safari'
])
bsTask('bsiPhone11', [
        'bs.deviceName':'iPhone 11', 'bs.osVersion':'13.0',
        'bs.browser':'safari', 'bs.name':'Spelet iPhone 11 Safari'
])
tasks.register('speletProd', Test) {
    group = 'verification'
    description = 'Runs tests against PROD environment'
    useJUnitPlatform()
    systemProperty 'env.config', 'spelet-prod'
    testLogging { events "passed", "skipped", "failed" }
    dependsOn(playwrightInstall)
}
tasks.register('speletDemo', Test) {
    group = 'verification'
    description = 'Runs tests against DEMO environment'
    useJUnitPlatform()
    systemProperty 'env.config', 'spelet-demo'
    testLogging { events "passed", "skipped", "failed" }
    dependsOn(playwrightInstall)
}
